# -*- coding: utf-8 -*-
"""Music and Mental Health.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-axRd0dB5XG8783ltgRWSYsd3VJQNsdv
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import warnings

warnings.filterwarnings('ignore')
sns.set(color_codes = True)   
sns.set_palette(palette = 'magma', n_colors = 8)

data = pd.read_csv('mxmh_survey_results.csv')
data.head()

data.shape

data.dtypes

data.info()

data.describe().T

"""The range of music listeners are from 10 to 89.

The 3rd quartile and max of Age, Hours per day, and BPM has a big difference. This shows it has outliers.
"""

data.describe(exclude='number').T

"""Removing outliers for age, hours per day and BPM"""

age_index = data[(data['Age'] > 70)].index
data = data.drop(age_index, axis=0)
hpd_index = data[data['Hours per day'] >= 15].index
data = data.drop(hpd_index, axis=0)
data_index = data[data['BPM'] > 200].index
data = data.drop(data_index, axis=0)

"""Removing Not Needed Columns"""

data.drop(['Timestamp', 'Permissions'], axis=1, inplace=True)

corr_data = data.corr()['Age']
corr_data.sort_values()

data.isnull().sum()

data['Age'] = data['Age'].fillna(round(data['Age'].mean(), 0))
data['While working'] = data['While working'].fillna(data['While working'].mode()[0])
data['Instrumentalist'] = data['Instrumentalist'].fillna(data['Instrumentalist'].mode()[0])
data['Composer'] = data['Composer'].fillna(data['Composer'].mode()[0])
data['Foreign languages'] = data['Foreign languages'].fillna(data['Foreign languages'].mode()[0])
data['Music effects'] = data['Music effects'].fillna(data['Music effects'].mode()[0])
data['Primary streaming service'] = data['Primary streaming service'].fillna(data['Primary streaming service'].mode()[0])

miss_bpm = data[data['BPM'].isnull() == True]
miss_bpm

df = data.copy()

miss_bpm['Fav genre'].unique()

"""### Univariate Analysis"""

fig, ax = plt.subplots(figsize = (15,10))

plt.subplot(331)
sns.histplot(data['Age'])
plt.text(0, 150,'Age, Hours per day, Anxiety, Depression, Insomnia and OCD distribution', fontweight = 'bold', fontfamily = 'serif', fontsize = 24)
plt.subplot(332)
sns.histplot(data['Hours per day'])
plt.subplot(333)
sns.histplot(data['Anxiety'])
plt.subplot(334)
sns.histplot(data['Depression'])
plt.subplot(335)
sns.histplot(data['Insomnia'])
plt.subplot(336)
sns.histplot(data['OCD'])

plt.show()

fig, ax = plt.subplots(figsize=(15, 10), nrows=2, ncols=3)

# define light colors
light_colors = ['#c2c2d6', '#ffb3e6', '#c2d6d6', '#ffb3b3', '#d9d9d9', '#b3b3ff']

# pie chart for proportion of primary streaming service 
data['Primary streaming service'].value_counts().plot.pie(autopct='%1.1f%%', ax=ax[0, 0], colors=light_colors)

# pie chart for proportion of listening to music while working
data['While working'].value_counts().plot.pie(autopct='%1.1f%%', ax=ax[1, 0], colors=light_colors)

# pie chart for proportion of whether listener is a instrumentalist
data['Instrumentalist'].value_counts().plot.pie(autopct='%1.1f%%', ax=ax[0, 1], colors=light_colors)

# pie chart for proportion of whether listener is a composer
data['Composer'].value_counts().plot.pie(autopct='%1.1f%%', ax=ax[1, 1], colors=light_colors)

# pie chart for proportion of whether listener explores new music
data['Exploratory'].value_counts().plot.pie(autopct='%1.1f%%', ax=ax[0, 2], colors=light_colors)

# pie chart for proportion of favourite genre
data['Fav genre'].value_counts().plot.pie(autopct='%1.1f%%', ax=ax[1, 2], colors=light_colors)

plt.suptitle("Music Listener's Survey Responses")
plt.tight_layout()
plt.show()

"""### Bivariate Analysis"""

plt.figure(figsize=(8,6))
sns.lineplot(x=data['Fav genre'], y=data['Age'], ci=None)
plt.xticks(rotation=90)

"""#### Continuous Vs Continuous"""

plot = sns.PairGrid(data[['Age', 'Hours per day','Anxiety', 'Depression','Insomnia','OCD']])
plot.map(sns.scatterplot)

"""#### Continuous Vs Categorical"""

con = ['Age', 'Hours per day', 'BPM']
cat = ['Primary streaming service', 'Fav genre']
mental = ['Anxiety', 'Depression', 'Insomnia', 'OCD']

for con_i in con:
    for cat_i in cat:
        sns.catplot(x = con_i, y = cat_i, kind = 'box', data = data).set(title = f'{con_i} by {cat_i}')

for mental_i in mental:
    for cat_i in cat:
        sns.catplot(x = mental_i, y = cat_i, kind = 'box', data = data).set(title = f'{mental_i} distribution by {cat_i}')

"""#### Categorical vs categorical"""

columns = [column for column in data.columns[1:-1]]
df_o = data[columns]
index_col = ['Fav genre', 'Primary streaming service']
for col in df_o.columns:
    if col != 'Primary streaming service':
        crosstab = pd.crosstab(index = df_o['Primary streaming service'], columns = df_o[col])
        crosstab.plot(kind = 'bar')

data['Primary streaming service'].value_counts(normalize=True)

s_colors2 = ['lightgreen', 'darkturquoise', 'lightcoral', 'steelblue', 'palevioletred', 'gold']

data.replace(['Other streaming service', 'I do not use a streaming service.', 'YouTube Music'],
                       ['Other', 'None', 'YouTube'], inplace=True)

bplot = sns.boxplot(data=data, x="Primary streaming service", y = "Age",
            showfliers = False,
            palette = s_colors2)

plt.title('Streaming services by Age')

data.replace(['No', 'Yes'],[0, 1], inplace=True)

labels = ['Anxiety', 'Depression','Insomnia', 'OCD']
x = np.arange(len(labels))
width = 0.15

fig, ax = plt.subplots(figsize=(10, 5))

b1 = ax.bar(x-2*width, data[(data.Instrumentalist == 0)].median()[-4:], width, color = 'indianred', label = "Non Instrumentalist")
b2 = ax.bar(x-width, data[(data.Instrumentalist == 1)].median()[-4:], width, color = 'darkred', label = "Instrumentalist")
b3 = ax.bar(x,data[(data.Composer == 0)].median()[-4:], width, color = 'cornflowerblue', label = "Non Composer")
b4 = ax.bar(x+width, data[(data.Composer == 1)].median()[-4:], width, color = 'darkblue', label = "Composer")

ax.set_ylim([0, 8])
ax.set_ylabel('Ranking')
ax.set_xlabel('Mental Illness')
ax.set_title('Mental health ranking distribution')
ax.set_xticks(x, labels)
ax.legend()

plt.show()

# plot the distribution of Age
g = sns.distplot(data['Age'], kde=False, bins=50)
g.set_title('Distribution of Age of Music Listeners')
g.set_xlabel('Age')
g.set_ylabel('Count')
plt.show()

#  distribution of listening hours per week
g = sns.distplot(data['Hours per day'], kde=False, bins=24)
g.set_title('Distribution of Listening Hours per Day')
g.set_xlabel('Hours per day')
g.set_ylabel('Count')
plt.show()

# Group the data by age intervals of 5 years and calculate the average number of hours
age_groups = pd.cut(data["Age"], range(0, 101, 10))
hours_per_age_group = data.groupby(age_groups)["Hours per day"].mean()

# Create a bar plot of the results
plt.bar(hours_per_age_group.index.astype(str), hours_per_age_group.values)
plt.title("Average Hours per Day Listening to Music by Age Group")
plt.xlabel("Age Group")
plt.ylabel("Hours per Day")
plt.show()

# Count the number of respondents who listen to music while working and those who don't
working_counts = data['While working'].value_counts()

# Create a pie chart
labels = ['Yes', 'No']
colors = ['skyblue', 'lightcoral']
plt.pie(working_counts, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)

# Add a title and display the chart
plt.title('Listening to Music While Working')
plt.axis('equal')
plt.show()

fig, ax = plt.subplots(figsize=(12, 6), nrows=2, ncols=3)

# define light colors
light_colors = ['#c2c2d6', '#ffb3e6', '#c2d6d6', '#ffb3b3', '#d9d9d9', '#b3b3ff']

# pie chart for proportion of primary streaming service 
data['Primary streaming service'].value_counts().plot.pie(autopct='%1.1f%%', ax=ax[0, 0], colors=light_colors)

# pie chart for proportion of listening to music while working
data['While working'].value_counts().plot.pie(autopct='%1.1f%%', ax=ax[1, 0], colors=light_colors)

# pie chart for proportion of whether listener is a instrumentalist
data['Instrumentalist'].value_counts().plot.pie(autopct='%1.1f%%', ax=ax[0, 1], colors=light_colors)

# pie chart for proportion of whether listener is a composer
data['Composer'].value_counts().plot.pie(autopct='%1.1f%%', ax=ax[1, 1], colors=light_colors)

# pie chart for proportion of whether listener explores new music
data['Exploratory'].value_counts().plot.pie(autopct='%1.1f%%', ax=ax[0, 2], colors=light_colors)

# pie chart for proportion of favourite genre
data['Fav genre'].value_counts().plot.pie(autopct='%1.1f%%', ax=ax[1, 2], colors=light_colors)

plt.suptitle("Music Listener's Survey Responses")
plt.tight_layout()
plt.show()

# select only the columns that start with 'Frequency'
genre_col = [col for col in data.columns if col.startswith('Frequency')]

df_genre = data[genre_col]
df_genre

# reform the dataframe to have a single column for genre and a single column for frequency
df_genre = df_genre.melt(var_name='Genre', value_name='Frequency')

# remove the 'Frequency[]' prefix from the genre column
df_genre['Genre'] = df_genre['Genre'].str.replace('Frequency ', '').str.replace('[', '').str.replace(']', '')

# df_genre

# stack count chart for frequency of listening to different genres
g = sns.countplot(y='Genre', data=df_genre, order=df_genre['Genre'].value_counts().index, hue='Frequency', dodge=False)
g.set_title('Frequency of Listening to Different Genres')
g.set_xlabel('Count')
g.set_ylabel('Genre')
plt.show()

# is there a relationship between age and genre preference?
g = sns.catplot(x='Age', y='Fav genre', data=data, kind='box', height=10, aspect=1.5)
g.set_xticklabels(rotation=90)
g.set_xlabels('Age')
g.set_ylabels('Favourite Genre')
g.set_titles('Age vs Favourite Genre')
plt.show()

data['BPM'].describe()

# replace 1e9 with None in BPM column
data['BPM'] = data['BPM'].apply(lambda x: data['BPM'].median() if x > 500 else x)

# distribution of BPM
data['BPM'].describe()

# Anxiety, Depression, Insomnia, and OCD

fig, ax = plt.subplots(figsize=(12, 10), nrows=2, ncols=2)
sns.countplot(x='Anxiety', data=data, ax=ax[0, 0])
sns.countplot(x='Depression', data=data, ax=ax[1, 0])
sns.countplot(x='Insomnia', data=data, ax=ax[0, 1])
sns.countplot(x='OCD', data=data, ax=ax[1, 1])

plt.suptitle("Music Listener's Mental Health")
plt.tight_layout()
plt.show()

age_intervals = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

# Group the data by age intervals and calculate the mean values of each mental health condition for each group
grouped_data = data.groupby(pd.cut(data['Age'], age_intervals)).mean()

# Plot the line graph
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(grouped_data.index.astype(str), grouped_data['Insomnia'], label='Insomnia')
ax.plot(grouped_data.index.astype(str), grouped_data['Depression'], label='Depression')
ax.plot(grouped_data.index.astype(str), grouped_data['Anxiety'], label='Anxiety')
ax.plot(grouped_data.index.astype(str), grouped_data['OCD'], label='OCD')
ax.set_xlabel('Age Intervals')
ax.set_ylabel('Level of Mental Health Condition')
ax.set_title('Mental Health Conditions with Age Intervals')
ax.legend()
plt.show()

"""Check if any relationship exists between Age and Hours of music listened to daily"""



