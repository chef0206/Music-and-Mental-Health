# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hMJhfGZZuJgI5hNZPvaDbnqG2YE7tJEi
"""
import pickle
from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import IterativeImputer
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.impute import KNNImputer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')
import altair as alt
import matplotlib.pyplot as plt
import seaborn as sns
warnings.filterwarnings("ignore", category = FutureWarning)
warnings.filterwarnings("ignore", category = DeprecationWarning)
import plotly.express as px

# """## Load and Clean Data"""

data = pd.read_csv('mxmh_survey_results.csv')

# Set Streamlit page configuration settings
st.set_page_config(
    page_title="CS312 | Longevity Potential Analysis on World Bank Parameters",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Define CSS to hide the footer element
hide_footer_css = """
<style>
footer {
    visibility: hidden;
}
</style>
"""
# Render the CSS using Streamlit's markdown function
st.markdown(hide_footer_css, unsafe_allow_html=True)


(rows, cols) = data.shape

data.dropna(inplace = True, axis = 0)


# """As the Data is collected through form let's look at some respondents background"""
def capping_outliers(data,feature):
    for col in feature:
        q1 = np.percentile(data[col],25)
        q3 = np.percentile(data[col],75)
        IQR = (q3-q1) * 1.5
        upper_bond = q3 + IQR
        lower_bond = q1 - IQR
        data[col] = np.where(data[col]>upper_bond,upper_bond,np.where(data[col]<lower_bond,lower_bond,data[col]))

def homepage():
    # Add title and description
    st.title("Music and Mental Health")
    st.write("Music and mental health are interconnected in many ways. Listening to music can have a significant impact on our emotions, mood, and overall well-being. Numerous studies have shown that music can help reduce symptoms of depression, anxiety, and other mental health disorders.")

    st.write("Music therapy, which involves the use of music to promote healing and improve well-being, is a well-established form of therapy for people with mental health conditions. It has been shown to be effective in treating a wide range of mental health conditions, including depression, anxiety, and post-traumatic stress disorder (PTSD).")

    fig = px.pie(data, values=data['Primary streaming service'].value_counts(), names=data['Primary streaming service'].unique())
    fig.update_layout(template = 'plotly_dark', title = dict(text = 'Primary streaming service', font=dict(size=25)), height = 600, width = 1200,)
    st.plotly_chart(fig, use_container_width=True)

    fig = px.histogram(x = data['Age'], y = data['Hours per day'])
    fig.update_layout(template = 'plotly_dark', title = dict(text = 'Age and Sum of Hours Per Day', font=dict(size=25)), xaxis_title = 'Age',yaxis_title = 'Sum of Hours')
    st.plotly_chart(fig, use_container_width=True)


def dataset():
    st.title("Dataset")
    st.write("The music and mental health dataset consists of responses from individuals about their music listening habits and mental health status. The dataset includes information about the individuals' age, primary streaming service, hours per day spent listening to music, whether they listen to music while working, whether they play an instrument or compose music, their favorite genre, their exploratory behavior in music listening, their knowledge of foreign languages, their frequency of listening to various genres of music, and the effects of music on their mental health, such as anxiety, depression, insomnia, and OCD. The dataset aims to explore the relationship between music listening habits and mental health status.")

    # Calculate the correlation matrix
    corr_matrix = data.corr()

    # Create a heatmap of the correlation matrix
    fig = px.imshow(corr_matrix, 
                    color_continuous_scale='RdBu_r',
                    title='Correlation Matrix of Music and Mental Health Dataset')
    st.plotly_chart(fig, use_container_width=True)

    st.write()

    fig = px.scatter(data, x='Age', y=['Anxiety', 'Depression', 'Insomnia', 'OCD'],
                 labels={'value': 'Score'},
                 hover_name='Age',
                 title='Age vs. Mental Health Scores')

    fig.update_traces(mode='markers')
    st.plotly_chart(fig, use_container_width=True)

    st.markdown("""
    ##### Here is the summary of indicators analyzed:

    * `Age` : The age of the respondent.
    
    * `Primary streaming service` : The main music streaming service used by the respondent. This column provides information on the music streaming habits of the respondents.
    
    * `Hours per day` : The number of hours per day the respondent spends listening to music. This column provides information on the music listening habits of the respondents.
    While working: Whether the respondent listens to music while working. This column provides information on the work habits of the respondents.

    * `Instrumentalist` : Whether the respondent plays a musical instrument. This column provides information on the musical skills and interests of the respondents.

    * `Composer` : Whether the respondent composes music. This column provides information on the musical skills and interests of the respondents.

    * `Fav genre` : The favorite music genre of the respondent. This column provides information on the musical preferences of the respondents.

    * `Exploratory` : Whether the respondent likes to explore new music genres. This column provides information on the musical preferences of the respondents.

    * `Foreign languages` : Whether the respondent listens to music in languages other than their primary language. This column provides information on the music listening habits of the respondents.

    * `BPM` : The preferred Beats Per Minute (BPM) of the respondent. This column provides information on the music listening habits of the respondents.

    * `Frequency`: Frequency of listening of each genre into four categories Never, Rarely, Sometimes, Very Frequently. The various genres listed are as follows:
        - Classical
        - Country
        - EDM 
        - Folk
        - Gospel
        - Hip Hop
        - Jazz
        - K pop
        - Latin
        - Lofi
        - Metal
        - Pop
        - R&B
        - Rap
        - Rock
        - Video game music
    
    * `Depression` : Depression level of respondend on a scale of one to ten.

    * `Anxiety` : Anxiety level of respondend on a scale of one to ten.

    * `Insomnia` : Insomnia level of respondend on a scale of one to ten.

    * `OCD` : OCD level of respondend on a scale of one to ten.

    * `Music Effects` : The last feature shows the effect of music people had on them. Some people showed positive result, some had no effect.

    """)

def datacleaning():
    st.title("Data Cleaning")
    o1, o2 = st.columns([1,1])

    with o1:
        bins= [0, 13, 30, 50, 100]
        labels = ['Children', 'Teenagers', 'Adults', 'Senior Citizens']
        data['Age Group'] = pd.cut(data['Age'], bins=bins, labels=labels, right=False)

        fig = px.histogram(data['Age Group'])
        fig.update_layout(template = 'plotly_dark', title = dict(text = 'Age Group Counts', font=dict(size=25)),
                xaxis_title = 'Age Group', yaxis_title = 'Value Counts', )
        st.plotly_chart(fig, use_container_width=True)

    with o2:
        feature = [feature for feature in data.columns if data[feature].dtypes != 'O' ]

        features = ['Age', 'Hours per day', 'BPM']
        capping_outliers(data,features)

        bins= [0, 13, 30, 50, 100]
        labels = ['Children', 'Teenagers', 'Adults', 'Senior Citizens']
        data['Age Group'] = pd.cut(data['Age'], bins=bins, labels=labels, right=False)

        fig = px.histogram(data['Age Group'])
        fig.update_layout(template = 'plotly_dark', title = dict(text = 'Age Group Counts', font=dict(size=25)),
                xaxis_title = 'Age Group', yaxis_title = 'Value Counts', )
        st.plotly_chart(fig, use_container_width=True)

def univariate_analysis():
    st.title("Univariate Analysis")
    # fig = px.box(data['Age'])
    # fig.update_layout(template = 'plotly_dark',title = dict(text = 'Distribution of Age', font=dict(size=25)))

    # fig = px.box(data, x="Fav genre", y="Hours per day", color="Primary streaming service",
    #          title="Distribution of hours per day spent listening to music by genre")
    # st.plotly_chart(fig, use_container_width=True)

    # create the BPM histogram
    # Extracting BPM data
    # bpm_data = data["BPM"]

    # # Creating histogram
    # fig = go.Figure(
    #     go.Histogram(
    #     x=bpm_data,
    #     nbinsx=20,
    #     marker=dict(
    #         color="#636EFA",
    #         line=dict(
    #             color="#636EFA",
    #             width=1
    #         )
    #     ),
    #     opacity=0.75
    #     )
    # )

    # # Updating layout
    # fig.update_layout(
    #     title="Histogram of BPM",
    #     xaxis_title="BPM",
    #     yaxis_title="Frequency"
    # )
    # st.plotly_chart(fig, use_container_width=True)

    # create the genre frequency histograms
    genres = ['Classical', 'Country', 'EDM', 'Folk', 'Gospel', 'Hip hop',
          'Jazz', 'K pop', 'Latin', 'Lofi', 'Metal', 'Pop', 'R&B',
          'Rap', 'Rock', 'Video game music']
    fig_genres = go.Figure()
    for genre in genres:
        fig_genres.add_trace(
            go.Histogram(x=data[f"Frequency [{genre}]"],
                     nbinsx=10, name=genre,
                     opacity=0.5, histnorm='probability density'))
    fig_genres.update_layout(barmode='overlay',
                         title="Histograms of Genre Frequencies",
                         xaxis_title="Frequency",
                         yaxis_title="Probability Density")
    st.plotly_chart(fig_genres, use_container_width=True)

    # Count the frequency of each favorite genre
    genre_counts = data["Fav genre"].value_counts()

    # Count the frequency of knowing a foreign language
    lang_counts = data["Foreign languages"].value_counts()

    # Create the bar chart for favorite genre
    genre_fig = go.Figure(
        data=go.Bar(
            x=genre_counts.index,
            y=genre_counts.values,
            marker=dict(color="#1DB954")
        )
    )
    genre_fig.update_layout(
        title="Favorite Music Genre",
        xaxis_title="Genre",
        yaxis_title="Count"
    )

    # Create the bar chart for foreign languages
    lang_fig = go.Figure(
        data=go.Bar(
            x=lang_counts.index,
            y=lang_counts.values,
            marker=dict(color="#1DB954")
        )
    )
    lang_fig.update_layout(
        title="Knowing a Foreign Language",
        xaxis_title="Knows a Foreign Language",
        yaxis_title="Count"
    )

    # Show the figures
    st.plotly_chart(lang_fig, use_container_width=True)

    hours_data = data['Hours per day']
    st.plotly_chart(genre_fig, use_container_width=True)

    # create a list of box traces for different streaming services
    box_traces = []
    for service in data['Primary streaming service'].unique():
        box_trace = go.Box(
            y=data[data['Primary streaming service']==service]['Hours per day'],
            name=service
        )
        box_traces.append(box_trace)

    # define layout with dark theme colors
    layout = go.Layout(
        title='Hours per day spent on streaming by service',
        xaxis=dict(title='Streaming Service'),
        yaxis=dict(title='Hours per day'),
        plot_bgcolor='rgb(17,17,17)',
        paper_bgcolor='rgb(17,17,17)',
        font=dict(color='white')
    )

    # create figure with box traces and layout
    fig = go.Figure(data=box_traces, layout=layout)
    st.plotly_chart(fig, use_container_width=True)

    # Create violin plot
    fig = px.violin(data, y=['Anxiety', 'Depression', 'Insomnia', 'OCD'],
    box=True, points='all', color_discrete_sequence=['#636EFA', '#EF553B', '#00CC96', '#AB63FA'])

    # Add title and axis labels
    fig.update_layout(title='Distribution of Mental Health Conditions',
                   xaxis_title='Mental Health Conditions',
                   yaxis_title='Score')

    st.plotly_chart(fig, use_container_width=True)

    
def input():
    from pathlib import Path
    # --- PATH SETTINGS ---
    current_dir = Path(__file__).parent if "__file__" in locals() else Path.cwd()
    css_file = current_dir / "main.css"
    with open(css_file) as f:
        st.markdown("<style>{}</style>".format(f.read()), unsafe_allow_html=True)

    st.title("Music and Mental Health")
    age = st.number_input('Age')
    streaming_service = st.selectbox("Primary streaming service", ('Spotify', 'YouTube Music', 'Pandora', 'Apple Music', 'No Streaming Service', 'Others'))
    
    hours = st.number_input('Hours of Listening')
    
    while_working = st.selectbox('While Working', ('Yes', 'No'))
        
    instrumentalist = st.selectbox('Do you listen to Instrumentalist?', ('Yes', 'No'))
    
    composer = st.selectbox('Do you listen to Composer?', ('Yes', 'No'))
    
    exploratory = st.selectbox("Do you listen to exploratory music?", ('Yes', 'No'))
    
    fav_genre = st.selectbox("Favourite Genre", ('Latin', 'Rock', 'Video game music', 'Jazz', 'R&B', 'K pop', 'Country', 'EDM', 'Hip hop', 'Pop', 'Rap', 'Classical', 'Metal', 'Folk', 'Lofi', 'Gospel'))

    foreign_language = st.selectbox("Do you listen Foreign Languages?", ('Yes', 'No'))
    
    BPM = st.number_input('Beats per minute(BPM)')

    classical = st.selectbox("Frequency of Classical Music", ('Rarely', 'Sometimes', 'Very frequently', 'Never'))
    country = st.selectbox("Frequency of Country Music", ('Rarely', 'Sometimes', 'Very frequently', 'Never'))
    EDM = st.selectbox("Frequency of EDM", ('Rarely', 'Sometimes', 'Very frequently', 'Never'))
    folk = st.selectbox("Frequency of Folk Music", ('Rarely', 'Sometimes', 'Very frequently', 'Never'))
    gospel = st.selectbox("Frequency of Gospel", ('Rarely', 'Sometimes', 'Very frequently', 'Never'))
    hiphop = st.selectbox("Frequency of Hip hop", ('Rarely', 'Sometimes', 'Very frequently', 'Never'))
    jazz = st.selectbox("Frequency of Jazz", ('Rarely', 'Sometimes', 'Very frequently', 'Never'))
    kpop = st.selectbox("Frequency of K pop", ('Rarely', 'Sometimes', 'Very frequently', 'Never'))
    latin = st.selectbox("Frequency of Latin Music", ('Rarely', 'Sometimes', 'Very frequently', 'Never'))
    lofi = st.selectbox("Frequency of Lofi", ('Rarely', 'Sometimes', 'Very frequently', 'Never'))
    metal = st.selectbox("Frequency of Metal", ('Rarely', 'Sometimes', 'Very frequently', 'Never'))
    pop = st.selectbox("Frequency of Pop", ('Rarely', 'Sometimes', 'Very frequently', 'Never'))
    rnb = st.selectbox("Frequency of R&B", ('Rarely', 'Sometimes', 'Very frequently', 'Never'))
    rap = st.selectbox("Frequency of Rap", ('Rarely', 'Sometimes', 'Very frequently', 'Never'))
    rock = st.selectbox("Frequency of Rock", ('Rarely', 'Sometimes', 'Very frequently', 'Never'))
    video_game = st.selectbox("Frequency of Video game Music", ('Rarely', 'Sometimes', 'Very frequently', 'Never'))

    anxiety = st.number_input("Anxiety level from a scale of one to ten", min_value=0, max_value=10)
    depression = st.number_input("Depression level from a scale of one to ten", min_value=0, max_value=10)
    insomnia = st.number_input("Insomnia level from a scale of one to ten", min_value=0, max_value=10)
    ocd = st.number_input("OCD level from a scale of one to ten", min_value=0, max_value=10)

    return input

def ml_model():
    # Loading the model
    with open('model.pkl', 'rb') as f:
        model = pickle.load(f)
    

    input = input()

    input_ = {}
    cols = list(data.columns)
    for i in range(len(cols)-1):
        input_[cols[i]] = input[i]
    
    valss = pd.DataFrame(input_, index=[0])
    result = ""
    if st.button("Mental Health"):
        result = model.predict(valss)
    ans = ""
    if result[0] == 0:
        ans = "Improve"
    elif result[0] == 1:
        ans = "No effect"
    else:
        ans = "Worsen"
    st.success("{}".format(ans))

nav = st.sidebar.radio("Analysis", ["Home","About Dataset", "Data Cleaning", "Univariate Analysis", "Gender and Longevity Potential","Carbon Emissions and Longevity Potential","Sanitation and Longevity Potential","Schooling and Longevity Potential","Obesity Prevalence and Longevity Potential","About Us","ML Model"])
# st.sidebar.image("developed.png", use_column_width=True)

# Show appropriate page based on selection
if nav == "Home":
    homepage()
elif nav == "About Dataset":
    dataset()
elif nav == "Data Cleaning":
    datacleaning()
elif nav == "Univariate Analysis":
    univariate_analysis()
elif nav == "ML Model":
    ml_model()
elif nav == "Schooling and Longevity Potential":
    schooling()
elif nav == "About Us":
    about()
elif nav == "Gender and Longevity Potential":
    gender()
elif nav == "Carbon Emissions and Longevity Potential":
    carbon_emissions()
elif nav == "Sanitation and Longevity Potential":
    sanitation()
elif nav == "Obesity Prevalence and Longevity Potential":
    obesity_prevalence()
else:
    pass
