# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17iWJgjkKY9535BjGXR7cGngg40QYEHQE
"""
import pickle
from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import IterativeImputer
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.impute import KNNImputer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
import streamlit as st
import plotly.graph_objects as go
import pandas as pd
import numpy as np
import plotly.express as px
import warnings
import altair as alt
import matplotlib.pyplot as plt
import seaborn as sns
warnings.filterwarnings("ignore", category = FutureWarning)
warnings.filterwarnings("ignore", category = DeprecationWarning)
import plotly.express as px

# Read data from 'backup.csv' and store it in a Pandas DataFrame
data = pd.read_csv('mxmh_survey_results.csv')

# Set Streamlit page configuration settings
st.set_page_config(
    page_title="CS312 | Longevity Potential Analysis on World Bank Parameters",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Define CSS to hide the footer element
hide_footer_css = """
<style>
footer {
    visibility: hidden;
}
</style>
"""


"""## Load and Clean Data"""

data = pd.read_csv('mxmh_survey_results.csv')
data.head()

(rows, cols) = data.shape
print("No of rows", rows)
print("No of columns:", cols)

data.describe()

data.info()

data.isnull().sum()

data[data.duplicated()]

"""No Duplicates in the Dataset"""

data.dropna(inplace = True, axis = 0)

"""As the Data is collected through form let's look at some respondents background"""

fig = px.box(data['Age'], template='plotly_dark')
fig.show()

bins= [0, 13, 30, 50, 100]
labels = ['Child', 'Teenagers', 'Adults', 'Senior Citizens']
data['Age Group'] = pd.cut(data['Age'], bins=bins, labels=labels, right=False)
data.head()

fig = px.histogram(data['Age Group'])
fig.update_layout(template = 'plotly_dark', title = dict(text = 'Age Group Counts', font=dict(size=25)),
                xaxis_title = 'Age Group', yaxis_title = 'Value Counts', 
                font=dict(
                family="Courier New, monospace",
                size=15,
                color="White"
    ))
fig.show()

mental_health_conditions = ['BPM', 'Anxiety', 'Depression', 'Insomnia', 'OCD']
data_mental_health = data[mental_health_conditions]

fig = px.box(data['Hours per day'])
fig.update_layout(template = 'plotly_dark', title = dict(text = 'Hours Per Day', font=dict(size=25)),
                xaxis_title = 'Hours Per Day', yaxis_title = 'Statistical Values', 
                font=dict(
                family="Courier New, monospace",
                size=15,
                color="White"
    ))
fig.show()

fig = px.histogram(x = data['Age'], y = data['Hours per day'])
fig.update_layout(template = 'plotly_dark', title = dict(text = 'Age and Sum of Hours Per Day', font=dict(size=25)),
                xaxis_title = 'Age', yaxis_title = 'Sum of Hours', 
                font=dict(
                family="Courier New, monospace",
                size=15,
                color="White"
    ))
fig.show()

data.columns

import plotly.express as px

fig = px.scatter(data, x="Age", y="Hours per day", color="Fav genre")
fig.update_traces(marker=dict(size=22,
                              line=dict(width=2,
                                        color='DarkSlateGrey')),
                  selector=dict(mode='markers'))

fig.update_layout(template = 'plotly_dark', title = dict(text = 'Age and Hours Per Day By Fav Genre', font=dict(size=25)),
                xaxis_title = 'Age', yaxis_title = 'Hours Per Day', 
                height = 700,
                width = 1200,
                font=dict(
                family="Courier New, monospace",
                size=15,
                color="White"
    ))

fig.show()

fig = px.pie(data, values=data['Primary streaming service'].value_counts(), names=data['Primary streaming service'].unique())
fig.update_layout(template = 'plotly_dark', title = dict(text = 'Primary streaming service', font=dict(size=25)),
                height = 600,
                width = 1200,
                font=dict(
                # family="Courier New, monospace",
                size=15,
                color="White"
    ))
fig.show()

"""## Popularity of Streaming Services

- Adults
"""

streaming_services_popularity_adults = data[data['Age Group'] == 'Adults']
fig = go.Figure(data=[go.Pie(labels=streaming_services_popularity_adults['Primary streaming service'].unique(),
        values = streaming_services_popularity_adults['Primary streaming service'].value_counts(), hole=.3)])
fig.update_layout(template = 'plotly_dark', title = dict(text = 'Popular Streaming Service for Adults', font=dict(size=25)),
                height = 600,
                width = 1200,
                font=dict(
                family="Courier New, monospace",
                size=15,
                color="White"
    ))
fig.show()

"""### Children"""

streaming_services_popularity_teenagers = data[data['Age Group'] == 'Teenagers']
fig = go.Figure(data=[go.Pie(labels=streaming_services_popularity_teenagers['Primary streaming service'].unique(),
        values = streaming_services_popularity_teenagers['Primary streaming service'].value_counts(), hole=.3)])
fig.update_layout(template = 'plotly_dark', title = dict(text = 'Popular Streaming Service for Teenagers', font=dict(size=25)),
                height = 600,
                width = 1200,
                font=dict(
                family="Courier New, monospace",
                size=15,
                color="White"
    ))
fig.show()

"""## Children"""

streaming_services_popularity_child = data[data['Age Group'] == 'Child']
fig = go.Figure(data=[go.Pie(labels=streaming_services_popularity_child['Primary streaming service'].unique(),
        values = streaming_services_popularity_child['Primary streaming service'].value_counts(), hole=.3)])
fig.update_layout(template = 'plotly_dark', title = dict(text = 'Popular Streaming Service for Children', font=dict(size=25)),
                height = 600,
                width = 1200,
                font=dict(
                family="Courier New, monospace",
                size=15,
                color="White"
    ))
fig.show()

"""- Senior Citizen"""

streaming_services_popularity_seniors = data[data['Age Group'] == 'Senior Citizens']
fig = go.Figure(data=[go.Pie(labels=streaming_services_popularity_seniors['Primary streaming service'].unique(),
        values = streaming_services_popularity_seniors['Primary streaming service'].value_counts(), hole=.3)])
fig.update_layout(template = 'plotly_dark', title = dict(text = 'Popular Streaming Service for Senior Citizens', font=dict(size=25)),
                height = 600,
                width = 1200,
                font=dict(
                family="Courier New, monospace",
                size=15,
                color="White"
    ))
fig.show()

"""### While Working Visualization"""

data_while_work = data[data['While working']=='Yes']
data_without_work = data[data['While working']=='No']

data_while_work = data_while_work['Age Group'].value_counts()
data_without_work = data_without_work['Age Group'].value_counts()

fig = go.Figure(data=[
    go.Bar(x = data_while_work.index, y = data_while_work.values, name='While working'),
    go.Bar(x = data_without_work.index, y = data_without_work.values, name='While not working')
])

fig.update_layout(template = 'plotly_dark', title = dict(text = 'Age Group vs While Working', font=dict(size=25)),
                xaxis_title = 'Age Group', yaxis_title = 'Value Counts', 
                height = 600,
                width = 1200,
                font=dict(
                family="Courier New, monospace",
                size=15,
                color="White"
    ))
fig.show()

data.columns

Frequency = data.loc[:, data.columns.str.startswith('Frequency')]
cols = list(Frequency.columns)
rename = {}
for col in cols:
    rename[col] = col[11:-1]
Frequency.columns = list(rename.values())
Frequency.head()

fig = go.Figure(data=[
    go.Bar(x = Frequency['Gospel'].value_counts().index, y = Frequency['Gospel'].value_counts().values, name='Gospel'),
    go.Bar(x = Frequency['K pop'].value_counts().index, y = Frequency['K pop'].value_counts().values, name='K pop'),
    go.Bar(x = Frequency['EDM'].value_counts().index, y = Frequency['EDM'].value_counts().values, name='EDM'),
    go.Bar(x = Frequency['Pop'].value_counts().index, y = Frequency['Pop'].value_counts().values, name='Pop'),
    go.Bar(x = Frequency['Video game music'].value_counts().index, y = Frequency['Video game music'].value_counts().values, name='Video game music'),
    go.Bar(x = Frequency['Country'].value_counts().index, y = Frequency['Country'].value_counts().values, name='Country'),
    go.Bar(x = Frequency['R&B'].value_counts().index, y = Frequency['R&B'].value_counts().values, name='R&B'),
])

fig.update_layout(template = 'plotly_dark', title = dict(text = 'Frequency vs Value Counts', font=dict(size=25)),
                xaxis_title = 'Frequency', yaxis_title = 'Value Counts', 
                height = 700,
                width = 1200,
                font=dict(
                family="Courier New, monospace",
                size=15,
                color="White"
    ))
fig.show()

fig = go.Figure(data=[
    go.Bar(x = Frequency['Rap'].value_counts().index, y = Frequency['Rap'].value_counts().values, name='Rap'),
    go.Bar(x = Frequency['Rock'].value_counts().index, y = Frequency['Rock'].value_counts().values, name='Rock'),
    go.Bar(x = Frequency['Metal'].value_counts().index, y = Frequency['Metal'].value_counts().values, name='Metal'),
    go.Bar(x = Frequency['Lofi'].value_counts().index, y = Frequency['Lofi'].value_counts().values, name='Lofi'),
    go.Bar(x = Frequency['Latin'].value_counts().index, y = Frequency['Latin'].value_counts().values, name='Latin'),
    go.Bar(x = Frequency['Jazz'].value_counts().index, y = Frequency['Jazz'].value_counts().values, name='Jazz'),
    go.Bar(x = Frequency['Folk'].value_counts().index, y = Frequency['Folk'].value_counts().values, name='Folk'),
    go.Bar(x = Frequency['Classical'].value_counts().index, y = Frequency['Classical'].value_counts().values, name='Classical'),
])

fig.update_layout(template = 'plotly_dark', title = dict(text = 'Frequency vs Value Counts', font=dict(size=25)),
                xaxis_title = 'Frequency', yaxis_title = 'Value Counts', 
                height = 700,
                width = 1200,
                font=dict(
                family="Courier New, monospace",
                size=15,
                color="White"
    ))
fig.show()

"""### Hours per Day and genre count"""

import plotly.express as px

fig = px.histogram(data, x="Hours per day", y="Fav genre", color="Fav genre", 
                   marginal="box", nbins=10, barmode="group")

fig.update_layout(template = 'plotly_dark', title = dict(text = 'Fav Genre vs Sum of Hours Per Day', font=dict(size=25)),
                xaxis_title = 'Sum of Hours Per Day', yaxis_title = 'Fav Genre', 
                height = 700,
                width = 1200,
                font=dict(
                family="Courier New, monospace",
                size=15,
                color="White"
    ))
fig.show()

fav_genre_among_teenagers = data[data['Age Group'] == 'Teenagers']
fav_genre_among_adults = data[data['Age Group'] == 'Adults']
fav_genre_among_senior_citizens = data[data['Age Group'] == 'Senior Citizens']

fig = go.Figure(data=[
    go.Bar(x = fav_genre_among_teenagers['Fav genre'].value_counts().index, y = fav_genre_among_teenagers['Fav genre'].value_counts().values, name='Teenagers'),
    go.Bar(x = fav_genre_among_adults['Fav genre'].value_counts().index, y = fav_genre_among_adults['Fav genre'].value_counts().values, name = 'Adults'),
    go.Bar(x = fav_genre_among_senior_citizens['Fav genre'].value_counts().index, y = fav_genre_among_senior_citizens['Fav genre'].value_counts().values, name = 'Senior Citizens'),
])

fig.update_layout(template = 'plotly_dark', title = dict(text = 'Age Group vs Fav Genre Count', font=dict(size=25)),
                xaxis_title = 'Fav Genre', yaxis_title = 'Count', 
                height = 700,
                width = 1200,
                font=dict(
                family="Courier New, monospace",
                size=15,
                color="White"
    ))
fig.show()

"""### Fav Genre Vs Mental Health Improvement"""

data['Music effects'].unique()

music_effect_improve = data[data['Music effects'] == 'Improve']
music_effect_no_effect  = data[data['Music effects'] == 'No effect']
music_effect_worsen = data[data['Music effects'] == 'Worsen']

fig = go.Figure(data=[
    go.Bar(x = music_effect_improve['Fav genre'].value_counts().index, y = music_effect_improve['Fav genre'].value_counts().values, name='Improve'),
    go.Bar(x = music_effect_no_effect['Fav genre'].value_counts().index, y = music_effect_no_effect['Fav genre'].value_counts().values, name = 'No effect'),
    go.Bar(x = music_effect_worsen['Fav genre'].value_counts().index, y = music_effect_worsen['Fav genre'].value_counts().values, name = 'Worsen'),
])

fig.update_layout(template = 'plotly_dark', title = dict(text = 'Genre vs Mental Health Results', font=dict(size=25)),
                xaxis_title = 'Fav Genre', yaxis_title = 'Count', 
                height = 700,
                width = 1200,
                font=dict(
                family="Courier New, monospace",
                size=15,
                color="White"
    ))
fig.show()

